# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  BUILD_PATH: '.' # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          # Some Pages deployments use a base path (project pages) and provide
          # both an origin and a base_path. Combine them so Astro receives the
          # full published site URL (origin + base_path) as --site. This
          # ensures generated links, canonical tags and social card URLs keep
          # the repository subpath (e.g. /physics/) instead of pointing to
          # the user/org root.
          SITE_ORIGIN="${{ steps.pages.outputs.origin }}"
          BASE_PATH="${{ steps.pages.outputs.base_path }}"
          # If base_path is "/" or empty, construct a fallback base path from the
          # repository name so project pages still build with the repo subpath.
          # Example: GITHUB_REPOSITORY=agriffard/physics -> /physics/
          if [ -z "$BASE_PATH" ] || [ "$BASE_PATH" = "/" ]; then
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
            BASE_PATH="/$REPO_NAME/"
          fi
          # Remove trailing slash from origin and ensure base path starts with /
          SITE_ORIGIN="${SITE_ORIGIN%/}"
          case "$BASE_PATH" in
            /*) FULL_SITE="$SITE_ORIGIN$BASE_PATH" ;;
            *) FULL_SITE="$SITE_ORIGIN/$BASE_PATH" ;;
          esac
          # Normalize duplicated slashes ("https://host//repo/") -> single slash
          FULL_SITE=$(echo "$FULL_SITE" | sed -E 's:([^:])/+:\1/:g')
          echo "Building site with --site=$FULL_SITE and --base=$BASE_PATH"
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "$FULL_SITE" \
            --base "$BASE_PATH"
      - name: Build Pagefind Index
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} pagefind --site dist
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
